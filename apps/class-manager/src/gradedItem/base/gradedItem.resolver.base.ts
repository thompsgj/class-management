/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGradedItemArgs } from "./CreateGradedItemArgs";
import { UpdateGradedItemArgs } from "./UpdateGradedItemArgs";
import { DeleteGradedItemArgs } from "./DeleteGradedItemArgs";
import { GradedItemCountArgs } from "./GradedItemCountArgs";
import { GradedItemFindManyArgs } from "./GradedItemFindManyArgs";
import { GradedItemFindUniqueArgs } from "./GradedItemFindUniqueArgs";
import { GradedItem } from "./GradedItem";
import { Grade } from "../../grade/base/Grade";
import { GradedItemService } from "../gradedItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GradedItem)
export class GradedItemResolverBase {
  constructor(
    protected readonly service: GradedItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GradedItem",
    action: "read",
    possession: "any",
  })
  async _gradedItemsMeta(
    @graphql.Args() args: GradedItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GradedItem])
  @nestAccessControl.UseRoles({
    resource: "GradedItem",
    action: "read",
    possession: "any",
  })
  async gradedItems(
    @graphql.Args() args: GradedItemFindManyArgs
  ): Promise<GradedItem[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GradedItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GradedItem",
    action: "read",
    possession: "own",
  })
  async gradedItem(
    @graphql.Args() args: GradedItemFindUniqueArgs
  ): Promise<GradedItem | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GradedItem)
  @nestAccessControl.UseRoles({
    resource: "GradedItem",
    action: "create",
    possession: "any",
  })
  async createGradedItem(
    @graphql.Args() args: CreateGradedItemArgs
  ): Promise<GradedItem> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        grades: args.data.grades
          ? {
              connect: args.data.grades,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GradedItem)
  @nestAccessControl.UseRoles({
    resource: "GradedItem",
    action: "update",
    possession: "any",
  })
  async updateGradedItem(
    @graphql.Args() args: UpdateGradedItemArgs
  ): Promise<GradedItem | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          grades: args.data.grades
            ? {
                connect: args.data.grades,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GradedItem)
  @nestAccessControl.UseRoles({
    resource: "GradedItem",
    action: "delete",
    possession: "any",
  })
  async deleteGradedItem(
    @graphql.Args() args: DeleteGradedItemArgs
  ): Promise<GradedItem | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Grade, {
    nullable: true,
    name: "grades",
  })
  @nestAccessControl.UseRoles({
    resource: "Grade",
    action: "read",
    possession: "any",
  })
  async resolveFieldGrades(
    @graphql.Parent() parent: GradedItem
  ): Promise<Grade | null> {
    const result = await this.service.getGrades(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
